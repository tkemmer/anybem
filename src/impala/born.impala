struct BornIon {
	charge: ChargePrimitive,
	radius: Real
}

static born_li = BornIon{charge: ChargePrimitive{pos: origin, val: 1 as Real}, radius: 0.645 as Real};
static born_na = BornIon{charge: ChargePrimitive{pos: origin, val: 1 as Real}, radius: 1.005 as Real};
static born_k  = BornIon{charge: ChargePrimitive{pos: origin, val: 1 as Real}, radius: 1.365 as Real};
static born_rb = BornIon{charge: ChargePrimitive{pos: origin, val: 1 as Real}, radius: 1.505 as Real};
static born_cs = BornIon{charge: ChargePrimitive{pos: origin, val: 1 as Real}, radius: 1.715 as Real};
static born_mg = BornIon{charge: ChargePrimitive{pos: origin, val: 2 as Real}, radius: 0.615 as Real};
static born_ca = BornIon{charge: ChargePrimitive{pos: origin, val: 2 as Real}, radius: 1.015 as Real};
static born_sr = BornIon{charge: ChargePrimitive{pos: origin, val: 2 as Real}, radius: 1.195 as Real};
static born_ba = BornIon{charge: ChargePrimitive{pos: origin, val: 2 as Real}, radius: 1.385 as Real};

static born_potpref  = 14.399639772478396 as Real;

fn born_extpot_local(pos: &Position, ion: &BornIon, params: &SystemParams) -> Real {
	born_potpref * (*ion).charge.val / (*params).epsSigma / euclidean(*pos, (*ion).charge.pos)
}

fn born_extpot_nonlocal(pos: &Position, ion: &BornIon, params: &SystemParams) -> Real {
	let r  = euclidean(*pos, (*ion).charge.pos);
	let nu = math.sqrt((*params).epsSigma / (*params).epsInf) * (*ion).radius / (*params).lambda;
	born_potpref * (*ion).charge.val/(*params).epsSigma/r * (one + ((*params).epsSigma - (*params).epsInf) /
		(*params).epsInf * sinh(nu)/nu * math.exp(-nu * (*ion).radius))
}

fn born_intpot_local(pos: &Position, ion: &BornIon, params: &SystemParams) -> Real {
	born_potpref * (*ion).charge.val *
		(one/euclidean(*pos, (*ion).charge.pos) + one/(*ion).radius * (one/(*params).epsSigma - one))
}

fn born_intpot_nonlocal(pos: &Position, ion: &BornIon, params: &SystemParams) -> Real {
	let r  = euclidean(*pos, (*ion).charge.pos);
	let nu = math.sqrt((*params).epsSigma/(*params).epsInf) * (*ion).radius / (*params).lambda;
	born_potpref * (*ion).charge.val * (one/r + one/(*ion).radius/(*params).epsSigma *
		(one - (*params).epsSigma + ((*params).epsSigma - (*params).epsInf) /
		(*params).epsInf * sinh(nu)/nu * math.exp(-nu)))
}
