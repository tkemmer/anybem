// ====================================================================================================================
// Nodes

type Node = Position;

struct NodeBuffer {
	buf: Buffer,
	len: Index
}

fn new_node_buffer(buf: Buffer, len: Index) -> NodeBuffer {
	NodeBuffer {
		buf: buf,
		len: len
	}
}

fn to_node_buffer(nodes: &[Node], len: Index) -> NodeBuffer {
	let buf = Buffer{
		device: 0,
		data:   bitcast[&[i8]](nodes),
		size:   (len as i64) * (sizeof[Node]() as i64)
	};
	new_node_buffer(buf, len)
}


// ====================================================================================================================
// Elements

struct Triangle {
	v1:     Index,      // first node
	v2:     Index,      // second node
	v3:     Index,      // third node
	center: Position,   // centroid
	normal: Position,   // unit normal vector
	area:   Real,       // surface area
	dist:   Real        // distance to origin
}

struct TriangleBuffer {
	buf: Buffer,
	len: Index
}

fn new_triangle_buffer(buf: Buffer, len: Index) -> TriangleBuffer {
	TriangleBuffer {
		buf: buf,
		len: len
	}
}

fn to_triangle_buffer(elements: &[Triangle], len: Index) -> TriangleBuffer {
	let buf = Buffer {
		device: 0,
		data:   bitcast[&[i8]](elements),
		size:   (len as i64) * (sizeof[Triangle]() as i64)
	};
	new_triangle_buffer(buf, len)
}

type SurfaceElement = Triangle;
type SurfaceElementBuffer = TriangleBuffer;

fn new_surface_element_buffer(buf: Buffer, len: Index) -> SurfaceElementBuffer {
	new_triangle_buffer(buf, len)
}

fn to_surface_element_buffer(elements: &[SurfaceElement], len: Index) -> SurfaceElementBuffer {
	to_triangle_buffer(elements, len)
}


// ====================================================================================================================
// Charges

struct Charge {
	pos: Position,
	val: Real
}

struct ChargeBuffer {
	buf: Buffer,
	len: Index
}


// ====================================================================================================================
// Surface model

struct SurfaceModel {
	nodes:    NodeBuffer,
	elements: SurfaceElementBuffer,
	charges:  ChargeBuffer,
	params:   SystemParams
}
