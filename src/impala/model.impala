// ====================================================================================================================
// Elements

struct Triangle {
	v1:     fn() -> Position,   // first node
	v2:     fn() -> Position,   // second node
	v3:     fn() -> Position,   // third node
	center: fn() -> Position,   // centroid
	normal: fn() -> Position,   // unit normal vector
	area:   fn() -> Real,       // surface area
	dist:   fn() -> Real        // distance to origin
}

struct TrianglePrimitive {
	v1:     Position,
	v2:     Position,
	v3:     Position
}

struct TriangleBuffer {
	device: fn()      -> i32,
	get:    fn(Index) -> Triangle,
	memory: fn()      -> i64,
	size:   fn()      -> Index
}

struct TriangleBufferPrimitive {
	data: &[TrianglePrimitive],
	size: Index
}

fn new_triangle(elem: TrianglePrimitive) -> Triangle {
	let unscaled_normal = cross(
		sub(elem.v2, elem.v1),
		sub(elem.v3, elem.v1)
	);
	let vnorm = vecnorm(unscaled_normal);
	let unit_normal = sdiv(unscaled_normal, vnorm);
	Triangle {
		v1:     || elem.v1,
		v2:     || elem.v2,
		v3:     || elem.v3,
		center: || sdiv(add(elem.v1, add(elem.v2, elem.v3)), 3 as Real),
		normal: || unit_normal,
		area:   || vnorm / 2 as Real,
		dist:   || dot(unit_normal, elem.v1)
	}
}

fn new_triangle_buffer(elements: TypedBuffer) -> TriangleBuffer {
	TriangleBuffer {
		device: elements.device,
		get:    @|idx| new_triangle(bitcast[&[TrianglePrimitive]](elements.data())(idx)),
		memory: @||    elements.buf().size,
		size:   elements.size
	}
}

fn to_triangle_buffer(tbuf: TriangleBufferPrimitive) -> TriangleBuffer {
	let buf = Buffer {
		device: 0,
		data:   bitcast[&[i8]](tbuf.data),
		size:   (tbuf.size as i64) * (sizeof[TrianglePrimitive]() as i64)
	};
	new_triangle_buffer(new_typed_buffer(buf, tbuf.size))
}

fn print_triangle(elem: Triangle) -> () {
	print_string("Triangle{ ");
	print_position(elem.v1()); print_string(", ");
	print_position(elem.v2()); print_string(", ");
	print_position(elem.v3());
	print_string(" }");
}

fn print_triangle_buffer(elements: TriangleBuffer, head_max: i32) -> () {
	print_string("Surface element buffer stats:\n");
	print_string(" * Device: "); print_i32(elements.device()); print_string("\n");
	print_string(" * Size:   "); print_index(elements.size()); print_string(" elements\n");
	print_string(" * Memory: "); print_i64(elements.memory()); print_string(" bytes\n");
	print_string(" * Head:\n");
	for i in range(0, cpu_intrinsics.min(elements.size(), head_max)) {
		let elem = elements.get(i);
		print_string("    - Element ");
		print_i32(i);
		print_string(":\n");
		print_string("       - v1:     "); print_position(elem.v1()); print_string("\n");
		print_string("       - v2:     "); print_position(elem.v2()); print_string("\n");
		print_string("       - v3:     "); print_position(elem.v3()); print_string("\n");
		print_string("       - center: "); print_position(elem.center()); print_string("\n");
		print_string("       - normal: "); print_position(elem.normal()); print_string("\n");
		print_string("       - area:   "); print_real(elem.area()); print_string("\n");
		print_string("       - dist:   "); print_real(elem.dist()); print_string("\n");
	}
}

type SurfaceElement = Triangle;
type SurfaceElementPrimitive = TrianglePrimitive;
type SurfaceElementBuffer = TriangleBuffer;
type SurfaceElementBufferPrimitive = TriangleBufferPrimitive;

static new_surface_element = new_triangle;
static new_surface_element_buffer = new_triangle_buffer;
static to_surface_element_buffer = to_triangle_buffer;
static print_surface_element_buffer = print_triangle_buffer;


// ====================================================================================================================
// Charges

struct Charge {
	pos: fn() -> Position,
	val: fn() -> Real
}

struct ChargePrimitive {
	pos: Position,
	val: Real
}

struct ChargeBuffer {
	device: fn()      -> i32,
	get:    fn(Index) -> Charge,
	memory: fn()      -> i64,
	size:   fn()      -> Index
}

struct ChargeBufferPrimitive {
	data: &[ChargePrimitive],
	size: Index
}

fn new_charge(charge: ChargePrimitive) -> Charge {
	Charge {
		pos: || charge.pos,
		val: || charge.val
	}
}

fn new_charge_buffer(charges: TypedBuffer) -> ChargeBuffer {
	ChargeBuffer {
		device: charges.device,
		get:    @|idx| new_charge(bitcast[&[ChargePrimitive]](charges.data())(idx)),
		memory: @||    charges.buf().size,
		size:   charges.size
	}
}

fn to_charge_buffer(cbuf: ChargeBufferPrimitive) -> ChargeBuffer {
	let buf = Buffer {
		device: 0,
		data:   bitcast[&[i8]](cbuf.data),
		size:   (cbuf.size as i64) * (sizeof[ChargePrimitive]() as i64)
	};
	new_charge_buffer(new_typed_buffer(buf, cbuf.size))
}

fn print_charge_buffer(charges: ChargeBuffer, head_max: i32) -> () {
	print_string("Charge buffer stats:\n");
	print_string(" * Device: "); print_i32(charges.device()); print_string("\n");
	print_string(" * Size:   "); print_index(charges.size()); print_string(" charges\n");
	print_string(" * Memory: "); print_i64(charges.memory()); print_string(" bytes\n");
	print_string(" * Head:\n");
	for i in range(0, cpu_intrinsics.min(charges.size(), head_max)) {
		let charge = charges.get(i);
		print_string("    - Charge ");
		print_i32(i);
		print_string(": { ");
		print_position(charge.pos()); print_string(", "); print_real(charge.val());
		print_string("}\n");
	}
}


// ====================================================================================================================
// System parameters

struct SystemParams {
	epsOmega: Real,
	epsSigma: Real,
	epsInf:   Real,
	lambda:   Real
}

static default_params = SystemParams{
	epsOmega: 2   as Real,
	epsSigma: 78  as Real,
	epsInf:   1.8 as Real,
	lambda:   20  as Real
};

fn print_system_params(params: SystemParams) -> () {
	print_string("System parameters:\n");
	print_string(" * epsOmega: "); print_real(params.epsOmega); print_string("\n");
	print_string(" * epsSigma: "); print_real(params.epsSigma); print_string("\n");
	print_string(" * epsInf:   "); print_real(params.epsInf); print_string("\n");
	print_string(" * lambda:   "); print_real(params.lambda); print_string("\n");
}


// ====================================================================================================================
// Surface model

struct SurfaceModel {
	elements: fn() -> SurfaceElementBuffer,
	charges:  fn() -> ChargeBuffer,
	params:   fn() -> SystemParams
}

struct SurfaceModelPrimitive {
	elements: SurfaceElementBufferPrimitive,
	charges:  ChargeBufferPrimitive,
	params:   SystemParams
}

fn new_surface_model(elements: SurfaceElementBuffer, charges: ChargeBuffer, params: SystemParams) -> SurfaceModel {
	SurfaceModel {
		elements: @|| elements,
		charges:  @|| charges,
		params:   @|| params
	}
}

fn to_surface_model(surf: SurfaceModelPrimitive) -> SurfaceModel {
	new_surface_model(
		to_surface_element_buffer(surf.elements),
		to_charge_buffer(surf.charges),
		surf.params
	)
}
