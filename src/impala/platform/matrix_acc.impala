fn @real_vector_on_platform(vec: RealVector, body: fn(RealVector) -> ()) -> () {
	with acc_vec in new_real_vector_on_platform(vec.size()) {
		copy(vec.buf(), acc_vec.buf());
		@@body(acc_vec);
		copy(acc_vec.buf(), vec.buf());
	}
}

fn @position_vector_on_platform(vec: PositionVector, body: fn(PositionVector) -> ()) -> () {
	with acc_vec in new_position_vector_on_platform(vec.size()) {
		copy(vec.buf(), acc_vec.buf());
		@@body(acc_vec);
		copy(acc_vec.buf(), vec.buf());
	}
}

fn @triangle_vector_on_platform(vec: TriangleVector, body: fn(TriangleVector) -> ()) -> () {
	with acc_vec in new_triangle_vector_on_platform(vec.size()) {
		copy(vec.buf(), acc_vec.buf());
		@@body(acc_vec);
		copy(acc_vec.buf(), vec.buf());
	}
}

fn @each_potential_matrix_row(A: PotentialMatrix, body: fn(i32) -> ()) -> () {
	let block = (128, 1, 1);
	let grid = (cld(A.size()(0), 128) * 128, 1, 1);
	let acc = platform_acc();

	for item in acc.exec(grid, block) {
		let i = item.bidx() * item.bdimx() + item.tidx();
		if i < A.size()(0) {
			@@body(i)
		}
	}
	acc.sync();
}
