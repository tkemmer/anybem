type PotentialType = bool;
static Laplace = true;
static ReYukawa = false;

type LocalityType = bool;
static SingleLayer = true;
static DoubleLayer = false;

struct PotentialMatrix {
	pot:      PotentialType,
	loc:      LocalityType,
	xis:      fn()             -> PositionVector,
	elements: fn()             -> SurfaceElementBuffer,
	size:     fn()             -> (Index, Index),
	get:      fn(Index, Index) -> Real
}

fn new_laplace_potential_matrix(
	loc:      LocalityType,
	xis:      PositionVector,
	elements: SurfaceElementBuffer
) -> PotentialMatrix {
	PotentialMatrix {
		pot:      Laplace,
		loc:      loc,
		xis:      ||    xis,
		elements: ||    elements,
		size:     ||    (xis.size(), elements.size()),
		get:      |i,j| if loc == SingleLayer {
			laplacepot_single(xis.get(i), elements.get(j))
		} else {
			laplacepot_double(xis.get(i), elements.get(j))
		}
	}
}

fn new_reyukawa_potential_matrix(
	loc:      LocalityType,
	xis:      PositionVector,
	elements: SurfaceElementBuffer,
	yuk:      Real
) -> PotentialMatrix {
	PotentialMatrix {
		pot:      ReYukawa,
		loc:      loc,
		xis:      ||    xis,
		elements: ||    elements,
		size:     ||    (xis.size(), elements.size()),
		get:      |i,j| if loc == SingleLayer {
			reyukawapot_single(xis.get(i), elements.get(j), yuk)
		} else {
			reyukawapot_double(xis.get(i), elements.get(j), yuk)
		}
	}
}

fn print_potential_matrix(mat: PotentialMatrix) -> () {
	let (r, c) = mat.size();
	print_index(r); print_string(" x "); print_index(c);
	if mat.pot == Laplace { print_string(" LaplacePotMatrix"); } else { print_string(" ReYukawaPotMatrix"); }
	if mat.loc == SingleLayer { print_string("{SingleLayer}"); } else { print_string("{DoubleLayer}"); }
	print_string("\n");
}

fn @_host_buf_get_real(buf: Buffer, idx: Index) -> Real { bitcast[&[Real]](buf.data)(idx) }
fn @_global_buf_get_real(buf: Buffer, idx: Index) -> Real { bitcast[&[1][Real]](buf.data)(idx) }
fn @_buf_get_real(buf: Buffer, idx: Index) -> Real {
	if buf.device == 0 { _host_buf_get_real(buf, idx) } else { _global_buf_get_real(buf, idx) }
}

fn @_host_buf_set_real(buf: Buffer, idx: Index, val: Real) -> () { bitcast[&mut[Real]](buf.data)(idx) = val }
fn @_global_buf_set_real(buf: Buffer, idx: Index, val: Real) -> () { bitcast[&mut[1][Real]](buf.data)(idx) = val }
fn @_buf_set_real(buf: Buffer, idx: Index, val: Real) -> () {
	if buf.device == 0 { _host_buf_set_real(buf, idx, val) } else { _global_buf_set_real(buf, idx, val) }
}

struct RealVector {
	buf:  fn()            -> Buffer,
	size: fn()            -> Index,
	get:  fn(Index)       -> Real,
	set:  fn(Index, Real) -> ()
}

fn new_real_vector(buf: Buffer) -> RealVector {
	RealVector {
		buf:  @||         buf,
		size: @||         buf.size / (sizeof[Real]() as i64),
		get:  @|idx|      _buf_get_real(buf, idx),
		set:  @|idx, val| _buf_set_real(buf, idx, val)
	}
}

fn fill_real_vector(vec: RealVector, val: Real) -> RealVector {
	for i in range(0, vec.size() as i32) {
		vec.set(i as Index, val)
	}
	vec
}

fn print_real_vector(vec: RealVector) -> () {
	print_index(vec.size()); print_string("-element Vector[Real]:\n");
	for i in range(0, cpu_intrinsics.min(10, vec.size() as i32)) {
		print_string(" "); print_real(vec.get(i as Index)); print_string("\n");
	}
}

fn @_host_buf_get_pos(buf: Buffer, idx: Index) -> Position { bitcast[&[Position]](buf.data)(idx) }
fn @_global_buf_get_pos(buf: Buffer, idx: Index) -> Position { bitcast[&[1][Position]](buf.data)(idx) }
fn @_buf_get_pos(buf: Buffer, idx: Index) -> Position {
	if buf.device == 0 { _host_buf_get_pos(buf, idx) } else { _global_buf_get_pos(buf, idx) }
}

fn @_host_buf_set_pos(buf: Buffer, idx: Index, val: Position) -> () { bitcast[&mut[Position]](buf.data)(idx) = val }
fn @_global_buf_set_pos(buf: Buffer, idx: Index, val: Position) -> () {
	bitcast[&mut[1][Position]](buf.data)(idx) = val
}
fn @_buf_set_pos(buf: Buffer, idx: Index, val: Position) -> () {
	if buf.device == 0 { _host_buf_set_pos(buf, idx, val) } else { _global_buf_set_pos(buf, idx, val) }
}

struct PositionVector {
	buf:  fn()                -> Buffer,
	size: fn()                -> Index,
	get:  fn(Index)           -> Position,
	set:  fn(Index, Position) -> (),
}

fn new_position_vector(buf: Buffer) -> PositionVector {
	PositionVector {
		buf:  @||         buf,
		size: @||         buf.size / (sizeof[Position]() as i64),
		get:  @|idx|      _buf_get_pos(buf, idx),
		set:  @|idx, val| _buf_set_pos(buf, idx, val)
	}
}

fn print_position_vector(vec: PositionVector) -> () {
	print_index(vec.size()); print_string("-element Vector[Position]:\n");
	for i in range(0, cpu_intrinsics.min(10, vec.size() as i32)) {
		print_string(" "); print_position(vec.get(i as Index)); print_string("\n");
	}
}
