fn @add(u: Position, v: Position) -> Position {
	Position {
		x: u.x + v.x,
		y: u.y + v.y,
		z: u.z + v.z
	}
}

fn @cross(u: Position, v: Position) -> Position {
	Position {
		x: u.y * v.z - u.z * v.y,
		y: u.x * v.z - u.z * v.x,
		z: u.x * v.y - u.y * v.x
	}
}

fn @dot(u: Position, v: Position) -> Real {
	u.x * v.x + u.y * v.y + u.z * v.z
}

fn @euclidean(u: Position, v: Position) -> Real {
	let dx = u.x - v.x;
	let dy = u.y - v.y;
	let dz = u.z - v.z;
	math.sqrt(dx * dx + dy * dy + dz * dz)
}

fn @neg(u: Position) -> Position {
	Position {
		x: -u.x,
		y: -u.y,
		z: -u.z
	}
}

fn @sdiv(u: Position, a: Real) -> Position {
	smul(u, one / a)
}

/// TODO not really linalg specific
fn @sign(x: Real) -> Real {
	if x == zero {
		zero
	} else {
		x / math.fabs(x)
	}
}

fn @smul(u: Position, a: Real) -> Position {
	Position {
		x: a * u.x,
		y: a * u.y,
		z: a * u.z
	}
}

fn @sub(u: Position, v: Position) -> Position {
	add(u, neg(v))
}

fn @vecnorm(u: Position) -> Real {
	math.sqrt(vecnorm2(u))
}

fn @vecnorm2(u: Position) -> Real {
	dot(u, u)
}
