struct QuadPoint2D {
	x:      Real,
	y:      Real,
	weight: Real
}

static _quadrature_points_triangle = [
	QuadPoint2D{x: 0.3333333333333333  as Real, y: 0.3333333333333333  as Real, weight: 0.1125 as Real},
	QuadPoint2D{x: 0.47014206410511505 as Real, y: 0.05971587178976981 as Real, weight: 0.06619707639425308 as Real},
	QuadPoint2D{x: 0.05971587178976981 as Real, y: 0.47014206410511505 as Real, weight: 0.06619707639425308 as Real},
	QuadPoint2D{x: 0.47014206410511505 as Real, y: 0.47014206410511505 as Real, weight: 0.06619707639425308 as Real},
	QuadPoint2D{x: 0.10128650732345633 as Real, y: 0.7974269853530872  as Real, weight: 0.06296959027241358 as Real},
	QuadPoint2D{x: 0.7974269853530872  as Real, y: 0.10128650732345633 as Real, weight: 0.06296959027241358 as Real},
	QuadPoint2D{x: 0.10128650732345633 as Real, y: 0.10128650732345633 as Real, weight: 0.06296959027241358 as Real}
];

fn @_quadrature_point(ref: QuadPoint2D, elem: Triangle) -> Position {
	let u = sub(elem.v2(), elem.v1());
	let v = sub(elem.v3(), elem.v1());
	Position {
		x: ref.x * u.x + ref.y * v.x + elem.v1().x,
		y: ref.x * u.y + ref.y * v.y + elem.v1().y,
		z: ref.x * u.z + ref.y * v.z + elem.v1().z
	}
}

type YukawaPotFn = fn(Position, Position, Position, Real) -> Real;

fn _reyukawapot_elem(
	xi:   Position,
	elem: Triangle,
	yuk:  Real,
	pot:  YukawaPotFn,
) -> Real {

	let mut sum = math.zero();
	for i in range(0, 7) {
		let qpt = _quadrature_points_triangle(i);
		let cpt = _quadrature_point(qpt, elem);
		sum += pot(cpt, xi, elem.normal(), yuk) * qpt.weight;
	}
	sum * (2 as Real) * elem.area()
}

fn @reyukawapot_single(
	xi:   Position,
	elem: Triangle,
	yuk:  Real
) -> Real {
	_reyukawapot_elem(xi, elem, yuk, _reyukawapot_single)
}

fn @reyukawapot_double(
	xi:   Position,
	elem: Triangle,
	yuk:  Real
) -> Real {
	_reyukawapot_elem(xi, elem, yuk, _reyukawapot_double)
}

fn _reyukawapot_single(
	x:   Position,
	xi:  Position,
	     Position,
	yuk: Real
) -> Real {

	let rnorm = euclidean(x, xi);
	let snorm = yuk * rnorm;

	if rnorm < math.eps() {
		-yuk
	} else if snorm < 0.1 as Real {
		let mut term = -snorm;
		let mut tsum = math.zero();
		let     tol  = math.eps() * math.abs(term);

		for i in range(1, 16) {
			if math.abs(term) <= tol {
				break()
			}

			tsum += term;
			term *= -snorm / (i as Real + math.one())
		}

		tsum / rnorm
	} else {
		(math.exp(-snorm) - math.one()) / rnorm
	}
}

fn _reyukawapot_double(
	x:   Position,
	xi:  Position,
	n:   Position,
	yuk: Real
) -> Real {

	let rnorm = euclidean(x, xi);
	let snorm = yuk * rnorm;
	let cosovernorm2 = dot(sub(x, xi), n) / (rnorm * rnorm * rnorm);

	if rnorm < math.eps() {
		yuk * yuk / (2 as Real) / math.sqrt(3 as Real)
	} else if snorm < 0.1 as Real {
		let mut term = one_half * snorm * snorm;
		let mut tsum = math.zero();
		let     tol  = math.eps() * math.abs(term);

		for i in range(2, 17) {
			if math.abs(term) <= tol {
				break()
			}

			tsum += term * (i as Real - math.one());
			term *= -snorm / (i as Real + math.one())
		}

		tsum * cosovernorm2
	} else {
		(math.one() - (math.one() + snorm) * math.exp(-snorm)) * cosovernorm2
	}
}
