fn rjasanow_tests(brn: BadhronSuite) -> () {
	with brn.group("Rjasanow") {
		let elem = Triangle{
				v1:     || new_node(Position{x: 0., y: 0., z: 0.}),
				v2:     || new_node(Position{x: 0., y: 1., z: 0.}),
				v3:     || new_node(Position{x: 0., y: 0., z: 1.}),
				center: || Position{x: 0., y: 1./3., z: 1./3.},
				normal: || Position{x: 1., y: 0., z: 0.},
				area:   || 0.5,
				dist:   || 0.
		};

		with brn.subgroup("rjasanow_distance") {
			with brn.assert_f64(0.) { rjasanow_distance(elem.v1().pos(), elem) }
			with brn.assert_f64(0.) { rjasanow_distance(elem.v2().pos(), elem) }
			with brn.assert_f64(0.) { rjasanow_distance(elem.v3().pos(), elem) }
			with brn.assert_f64(1.) { rjasanow_distance(Position{x: 1., y: 0., z: 0.}, elem) }
			with brn.assert_f64(1.) { rjasanow_distance(Position{x: 1., y: 1., z: 0.}, elem) }
			with brn.assert_f64(1.) { rjasanow_distance(Position{x: 1., y: 0., z: 1.}, elem) }
			with brn.assert_f64(-1.) { rjasanow_distance(Position{x: -1., y: 0., z: 0.}, elem) }
			with brn.assert_f64(-1.) { rjasanow_distance(Position{x: -1., y: 1., z: 0.}, elem) }
			with brn.assert_f64(-1.) { rjasanow_distance(Position{x: -1., y: 0., z: 1.}, elem) }
		}

		with brn.subgroup("rjasanow_project") {
			with brn.assert() {
				assert_position(elem.v1().pos(), rjasanow_project(Position{x: 1., y: 0., z: 0.}, elem))
			}
			with brn.assert() {
				assert_position(elem.v2().pos(), rjasanow_project(Position{x: 1., y: 1., z: 0.}, elem))
			}
			with brn.assert() {
				assert_position(elem.v3().pos(), rjasanow_project(Position{x: 1., y: 0., z: 1.}, elem))
			}
		}

		with brn.subgroup("rjasanow_laplacepot_single") {
			// (1) xi is a triangle vertex
			with brn.assert_f64(1.246450480280461) {
				rjasanow_laplacepot_single(elem.v1().pos(), elem)
			}
			with brn.assert_f64(0.881373587019543) {
				rjasanow_laplacepot_single(elem.v2().pos(), elem)
			}
			with brn.assert_f64(0.881373587019543) {
				rjasanow_laplacepot_single(elem.v3().pos(), elem)
			}

			// (2) xi is in the same plane as the triangle
			with brn.assert_f64(0.36507689326091797) {
				rjasanow_laplacepot_single(Position{x: 0., y: -1., z: 0.}, elem)
			}
			with brn.assert_f64(0.2647295540813806) {
				rjasanow_laplacepot_single(Position{x: 0., y: -1., z: -1.}, elem)
			}

			// (3) xi lies on a line through a vertex, perpendicular to the triangle plane
			with brn.assert_f64(0.4369992897579713) {
				rjasanow_laplacepot_single(Position{x: 1., y: 0., z: 0.}, elem)
			}
			with brn.assert_f64(0.3966795606632589) {
				rjasanow_laplacepot_single(Position{x: 1., y: 1., z: 0.}, elem)
			}
			with brn.assert_f64(0.3966795606632589) {
				rjasanow_laplacepot_single(Position{x: 1., y: 0., z: 1.}, elem)
			}

			// (4) xi lies somewhere else in space
			with brn.assert_f64(0.2927502120375999) {
				rjasanow_laplacepot_single(Position{x: 1., y: -1., z: 0.}, elem)
			}
			with brn.assert_f64(0.233364182004741) {
				rjasanow_laplacepot_single(Position{x: 1., y: -1., z: -1.}, elem)
			}
		}

		with brn.subgroup("rjasanow_laplacepot_double") {
			// (1) xi is a triangle vertex
			with brn.assert_f64(0.) {
				rjasanow_laplacepot_double(elem.v1().pos(), elem)
			}
			with brn.assert_f64(0.) {
				rjasanow_laplacepot_double(elem.v2().pos(), elem)
			}
			with brn.assert_f64(0.) {
				rjasanow_laplacepot_double(elem.v3().pos(), elem)
			}

			// (2) xi is in the same plane as the triangle
			with brn.assert_f64(0.) {
				rjasanow_laplacepot_double(Position{x: 0., y: -1., z: 0.}, elem)
			}
			with brn.assert_f64(0.) {
				rjasanow_laplacepot_double(Position{x: 0., y: -1., z: -1.}, elem)
			}

			brn.pending("xi above vertex");
			brn.pending("xi somewhere in space");
		}
	}
}
