fn rjasanow_tests(brn: BadhronSuite) -> () {
	with brn.group("Rjasanow") {
		let elem = Triangle{
				v1:     || new_node(Position{x: 0., y: 0., z: 0.}),
				v2:     || new_node(Position{x: 0., y: 1., z: 0.}),
				v3:     || new_node(Position{x: 0., y: 0., z: 1.}),
				center: || Position{x: 0., y: 1./3., z: 1./3.},
				normal: || Position{x: 1., y: 0., z: 0.},
				area:   || 0.5,
				dist:   || 0.
		};

		with brn.subgroup("rjasanow_distance") {
			with brn.assert_f64(0.) { rjasanow_distance(elem.v1().pos(), elem) }
			with brn.assert_f64(0.) { rjasanow_distance(elem.v2().pos(), elem) }
			with brn.assert_f64(0.) { rjasanow_distance(elem.v3().pos(), elem) }
			with brn.assert_f64(1.) { rjasanow_distance(Position{x: 1., y: 0., z: 0.}, elem) }
			with brn.assert_f64(1.) { rjasanow_distance(Position{x: 1., y: 1., z: 0.}, elem) }
			with brn.assert_f64(1.) { rjasanow_distance(Position{x: 1., y: 0., z: 1.}, elem) }
			with brn.assert_f64(-1.) { rjasanow_distance(Position{x: -1., y: 0., z: 0.}, elem) }
			with brn.assert_f64(-1.) { rjasanow_distance(Position{x: -1., y: 1., z: 0.}, elem) }
			with brn.assert_f64(-1.) { rjasanow_distance(Position{x: -1., y: 0., z: 1.}, elem) }
		}

		with brn.subgroup("rjasanow_project") {
			let p1 = rjasanow_project(Position{x: 1., y: 0., z: 0.}, elem);
			with brn.assert_f64(elem.v1().x()) { p1.x }
			with brn.assert_f64(elem.v1().y()) { p1.y }
			with brn.assert_f64(elem.v1().z()) { p1.z }
			let p2 = rjasanow_project(Position{x: 1., y: 1., z: 0.}, elem);
			with brn.assert_f64(elem.v2().x()) { p2.x }
			with brn.assert_f64(elem.v2().y()) { p2.y }
			with brn.assert_f64(elem.v2().z()) { p2.z }
			let p3 = rjasanow_project(Position{x: 1., y: 0., z: 1.}, elem);
			with brn.assert_f64(elem.v3().x()) { p3.x }
			with brn.assert_f64(elem.v3().y()) { p3.y }
			with brn.assert_f64(elem.v3().z()) { p3.z }
		}

		with brn.subgroup("rjasanow_laplacepot_single") {
			// (1) xi is a triangle vertex
			with brn.assert_f64(four_pi * 0.099189377627951192068415700486459476011275034113019436460) {
				rjasanow_laplacepot_single(elem.v1().pos(), elem)
			}
			with brn.assert_f64(four_pi * 0.070137481542397515891964948616904961601109053078512490737) {
				rjasanow_laplacepot_single(elem.v2().pos(), elem)
			}
			with brn.assert_f64(four_pi * 0.070137481542397515891964948616904961601109053078512490737) {
				rjasanow_laplacepot_single(elem.v3().pos(), elem)
			}

			// (2) xi is in the same plane as the triangle
			with brn.assert_f64(four_pi * 0.029051896085553676176450751869554514410165981034506945723) {
				rjasanow_laplacepot_single(Position{x: 0., y: -1., z: 0.}, elem)
			}
			with brn.assert_f64(four_pi * (
				0.110553267370012295141653085597608171948437903548411687443 -
				2. * 0.044743379406364904901413439333009046862112643066826198636
			)) {
				rjasanow_laplacepot_single(Position{x: 0., y: -1., z: -1.}, elem)
			}

			// (3) xi lies on a line through a vertex, perpendicular to the triangle plane
			with brn.assert_f64(four_pi * 0.034775298546314300210123433855429220291493953452986787115) {
				rjasanow_laplacepot_single(Position{x: 1., y: 0., z: 0.}, elem)
			}
			with brn.assert_f64(four_pi * 0.03156675645153950833618064292205638527751593336549) {
				rjasanow_laplacepot_single(Position{x: 1., y: 1., z: 0.}, elem)
			}
			with brn.assert_f64(four_pi * 0.03156675645153950833618064292205638527751593336549) {
				rjasanow_laplacepot_single(Position{x: 1., y: 0., z: 1.}, elem)
			}

			brn.pending("xi somewhere in space");
		}

		with brn.subgroup("rjasanow_laplacepot_double") {
			// (1) xi is a triangle vertex
			with brn.assert_f64(0.) {
				rjasanow_laplacepot_double(elem.v1().pos(), elem)
			}
			with brn.assert_f64(0.) {
				rjasanow_laplacepot_double(elem.v2().pos(), elem)
			}
			with brn.assert_f64(0.) {
				rjasanow_laplacepot_double(elem.v3().pos(), elem)
			}

			// (2) xi is in the same plane as the triangle
			with brn.assert_f64(0.) {
				rjasanow_laplacepot_double(Position{x: 0., y: -1., z: 0.}, elem)
			}
			with brn.assert_f64(0.) {
				rjasanow_laplacepot_double(Position{x: 0., y: -1., z: -1.}, elem)
			}

			brn.pending("xi above vertex");
			brn.pending("xi somewhere in space");
		}
	}
}
